# PromptMan/.github/workflows/main.yml
name: PromptMan CI/CD to Google Cloud Run

on:
  push:
    branches:
      - main # Trigger deployment on pushes to the main branch

env:
  # GCP Settings from GitHub Secrets
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  ARTIFACT_REGISTRY_REPO: ${{ secrets.ARTIFACT_REGISTRY_REPO }} # e.g., asia-south1-docker.pkg.dev/your-project-id/promptman-repo
  
  # Image and Service Naming Conventions
  BACKEND_IMAGE_NAME: promptman-backend
  FRONTEND_IMAGE_NAME: promptman-frontend
  BACKEND_SERVICE_NAME: promptman-backend
  FRONTEND_SERVICE_NAME: promptman-frontend
  
  # VPC Connector Name (ensure this exists in your GCP project and region)
  VPC_CONNECTOR_NAME: promptman-connector
  
  # Use the commit SHA for unique Docker image tags for better traceability
  IMAGE_TAG: ${{ github.sha }} 

jobs:
  # =======================================================
  # 1. Build & Push Docker Images using Google Cloud Build
  # =======================================================
  build_and_push_images:
    name: Build & Push Images
    runs-on: ubuntu-latest
    # This job runs only on pushes to the main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' 
    
    permissions:
      contents: 'read'      # Required to checkout the repository code
      id-token: 'write'   # Required for Workload Identity Federation

    outputs: # Define outputs to pass image URIs to deployment jobs
      backend_image_uri: ${{ steps.build_backend.outputs.image_uri }}
      frontend_image_uri: ${{ steps.build_frontend.outputs.image_uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (via Workload Identity Federation)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Configure Docker helper to authenticate with Artifact Registry (uses gcloud credentials)
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build and Push Backend Docker Image (using Cloud Build)
        id: build_backend
        run: |
          IMAGE_URI="${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          echo "Building Backend Image to: $IMAGE_URI"
          gcloud builds submit ./backend \
            --tag "$IMAGE_URI" \
            --project=${{ env.GCP_PROJECT_ID }} \
            --quiet # Suppress verbose output from gcloud
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT # Set output for subsequent jobs

      - name: Build and Push Frontend Docker Image (using Cloud Build and frontend/cloudbuild.yaml)
        id: build_frontend
        run: |
          IMAGE_URI="${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          echo "Building Frontend Image to: $IMAGE_URI"
          # Pass substitutions required by frontend/cloudbuild.yaml:
          # _REACT_APP_GA_MEASUREMENT_ID comes from GitHub Secrets
          # _IMAGE_TAG_NAME is constructed here
          gcloud builds submit ./frontend \
            --config=frontend/cloudbuild.yaml \
            --substitutions=_REACT_APP_GA_MEASUREMENT_ID="${{ secrets.PROD_REACT_APP_GA_MEASUREMENT_ID }}",_IMAGE_TAG_NAME="$IMAGE_URI" \
            --project=${{ env.GCP_PROJECT_ID }} \
            --quiet
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT # Set output for subsequent jobs

  # ==========================================
  # 2. Deploy Backend Service to Cloud Run
  # ==========================================
  deploy_backend:
    name: Deploy Backend Service
    runs-on: ubuntu-latest
    needs: build_and_push_images # Depends on images being successfully built and pushed
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: 'read'
      id-token: 'write'

    outputs: # Output the deployed backend URL and host for the frontend deployment
       backend_url: ${{ steps.deploy_backend_service.outputs.url }}
       backend_host: ${{ steps.deploy_backend_service.outputs.host }}

    steps:
      - name: Checkout code 
        uses: actions/checkout@v4 # Though not strictly needed for deploy-from-image, good for consistency

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Deploy Backend to Cloud Run
        id: deploy_backend_service # Step ID for referencing outputs
        run: |
          echo "Deploying Backend Image: ${{ needs.build_and_push_images.outputs.backend_image_uri }}"
          gcloud run deploy ${{ env.BACKEND_SERVICE_NAME }} \
            --image "${{ needs.build_and_push_images.outputs.backend_image_uri }}" \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --port 8000 \
            --allow-unauthenticated \
            --set-env-vars="PYTHONUNBUFFERED=1,REDIS_HOST=${{ secrets.PROD_REDIS_HOST_IP }},REDIS_PORT=${{ secrets.PROD_REDIS_INSTANCE_PORT }},ALLOWED_ORIGINS=${{ secrets.PROD_BACKEND_ALLOWED_ORIGINS }}" \
            --vpc-connector "${{ env.VPC_CONNECTOR_NAME }}" \
            --vpc-egress=all-traffic \
            --memory=2Gi \
            --cpu=1 \
            --min-instances=0 \
            --project=${{ env.GCP_PROJECT_ID }} \
            --quiet
            
          # Get the URL of the deployed service to pass to the frontend deployment
          SERVICE_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} --platform managed --region ${{ env.GCP_REGION }} --format='value(status.url)' --project=${{ env.GCP_PROJECT_ID }})
          SERVICE_HOST=$(echo $SERVICE_URL | sed -e 's|^[^/]*//||' -e 's|/.*$||') # Extracts hostname
          echo "Backend Service URL: $SERVICE_URL"
          echo "Backend Service Host: $SERVICE_HOST"
          # Set outputs for the next job
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "host=$SERVICE_HOST" >> $GITHUB_OUTPUT

  # ==========================================
  # 3. Deploy Frontend Service to Cloud Run
  # ==========================================
  deploy_frontend:
    name: Deploy Frontend Service
    runs-on: ubuntu-latest
    needs: deploy_backend # Depends on backend deployment to get its URL
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy Frontend to Cloud Run
        run: |
          BACKEND_URL="${{ needs.deploy_backend.outputs.backend_url }}"
          BACKEND_HOST="${{ needs.deploy_backend.outputs.backend_host }}"
          
          if [ -z "$BACKEND_URL" ] || [ -z "$BACKEND_HOST" ]; then
            echo "::error::Backend URL or Host not received from previous job. Check deploy_backend job outputs."
            exit 1
          fi
          
          echo "Deploying Frontend Image: ${{ needs.build_and_push_images.outputs.frontend_image_uri }}"
          echo "Configuring Nginx with Backend URL: $BACKEND_URL and Host: $BACKEND_HOST"
          
          gcloud run deploy ${{ env.FRONTEND_SERVICE_NAME }} \
            --image "${{ needs.build_and_push_images.outputs.frontend_image_uri }}" \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --port 80 \
            --allow-unauthenticated \
            --set-env-vars="BACKEND_SERVICE_URL=${BACKEND_URL},BACKEND_SERVICE_HOST=${BACKEND_HOST}" \
            --project=${{ env.GCP_PROJECT_ID }} \
            --quiet